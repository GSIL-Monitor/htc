<?php

namespace App\Http\Controllers;

use Exception;
use App\User;
use Cache;
use Illuminate\Http\Request;

use App\Notifications\EmailConfirmNotification;
use Mail;

class EmailConfirmController extends Controller
{
    public function verify(Request $request) {
        $email = $request->input('email');
        $token = $request->input('token');

        if (!$email || !$token) {
            throw new Exception('验证链接不正确');
        }

        // 从缓存中读取数据，我们把从 url 中获取的 `token` 与缓存中的值做对比
        // 如果缓存不存在或者返回的值与 url 中的 `token` 不一致就抛出异常。
        if ($token != Cache::get('email_confirm_'.$email)) {
            throw new Exception('验证链接不正确或已过期');
        }

        // 根据邮箱从数据库中获取对应的用户
        // 通常来说能通过 token 校验的情况下不可能出现用户不存在
        // 但是为了代码的健壮性我们还是需要做这个判断
        if (!$user = User::where('email', $email)->first()) {
            throw new Exception('用户不存在');
        }

        // 将指定的 key 从缓存中删除，由于已经完成了验证，这个缓存就没有必要继续保留。
        Cache::forget('email_confirm_'.$email);

        // 最关键的，要把对应用户的 `email_verified` 字段改为 `true`。
        $user->update(['email_verified' => true]);

        // 最后告知用户邮箱验证成功。
        return view('auth.email_confirm_success', ['msg' => '邮箱验证成功']);
    }
//EmailConfirmController
    public function send(Request $request) {
        $user = $request->user();

        if ($user->email_verified) {
            throw new Exception('你已经验证过邮箱了');
        }

        // 调用 notify() 方法用来发送我们定义好的通知类
        $user->notify(new EmailConfirmNotification());

        return view('auth.email_confirm_success', ['msg' => '邮件发送成功']);
    }

    public function notice(Request $request) {
        //return view('auth.email_confirm_notice');
        return view('auth.confirm');
    }
}
