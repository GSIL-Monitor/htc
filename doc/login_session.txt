<?php

第七章. 会话管理

$ php artisan make:controller SessionsController

// web.php
Route::get('login', 'SessionsController@create')->name('login');
Route::post('login', 'SessionsController@store')->name('login');
Route::delete('logout', 'SessionsController@destroy')->name('logout');

Route::get('/mobile/login', 'MobileController@getLogin')->name('mobile.login');
Route::post('/mobile/login', 'MobileController@postLogin')->name('mobile.login');
Route::delete('/mobile/logout', 'MobileController@deleteLogout')->name('mobile.logout');

// app/Http/Controllers/MobileController.php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Auth;

class MobileController extends Controller
{
    public function getLogin() {
        // resources/views/mobile/login.blade.php
        return view('mobile.login');
    }

    public function postLogin(Request $request) {
        $credentials = $this->validate($request, [
           'email' => 'required|email|max:255',
           'password' => 'required'
        ]);

        // 借助 Laravel 提供的 Auth 的 attempt 方法可以让我们很方便的完成用户的身份认证操作
        //if (Auth::attempt(['email' => $email, 'password' => $password])) {
        if (Auth::attempt($credentials)) {
            // 该用户存在于数据库，且邮箱和密码相符合
            session()->flash('success', '欢迎回来！');
            return redirect()->route('users.show', [Auth::user()]);
        } else {
            // 使用 withInput() 后, 模板里 old('email') 将能获取到上一次用户提交的内容，
            // 这样用户就无需再次输入邮箱等内容：
            session()->flash('danger', '很抱歉，您的邮箱和密码不匹配');
            return redirect()->back()->withInput();
        }
    }
}

//---------------------------------------------------------------------------
attempt 方法会接收一个数组来作为第一个参数，
该参数提供的值将用于寻找数据库中的用户数据。 (注意文件顶部引入 use Auth;)

因此在上面的例子中，attempt 方法执行的代码逻辑如下：

1. 使用 email 字段的值在数据库中查找；
2. 如果用户被找到：
    (1). 先将传参的 password 值进行哈希加密，然后与数据库中 password 字段中已加密的密码进行匹配；
    (2). 如果匹配后两个值完全一致，会创建一个『会话』给通过认证的用户。
         会话在创建的同时，也会种下一个名为 laravel_session 的 HTTP Cookie，
         以此 Cookie 来记录用户登录状态，最终返回 true；
    (3). 如果匹配后两个值不一致，则返回 false；
3. 如果用户未找到，则返回 false。


